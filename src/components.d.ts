/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AirAvatar {
        "bgColor": string;
        "name": string;
        "rounded": boolean;
        "size": string;
    }
    interface AirButton {
        "autoWidth": boolean;
        "circle": boolean;
        "content": string;
        "disabled": boolean;
        "ghost": boolean;
        "icon": string;
        "loading": boolean;
        "plain": boolean;
        "round": boolean;
        "size": 'big' | 'small' | 'medium';
        "suffixIcon": string;
        "type": 'primary' | 'success' | 'info' | 'warning' | 'danger' | '';
    }
    interface AirCard {
        "description": string;
        "imageUrl": string;
        "showButton": boolean;
        "tags": string[];
        "title": string;
    }
    interface AirFootNav {
    }
    interface AirLinkButton {
        "href": string;
        "icon": string;
        "label": string;
        "textColor": string;
    }
    interface AirRow {
    }
    interface AirTopbar {
        "defaultBgColor": string;
        "gradientBgColor": string;
        "scrollBgColor": string;
        "scrolledTextColor": string;
        "shadowEffect": boolean;
        "textColor": string;
        "titleText": string;
        "titleTextColor": string;
    }
    interface HeroSection {
    }
}
declare global {
    interface HTMLAirAvatarElement extends Components.AirAvatar, HTMLStencilElement {
    }
    var HTMLAirAvatarElement: {
        prototype: HTMLAirAvatarElement;
        new (): HTMLAirAvatarElement;
    };
    interface HTMLAirButtonElement extends Components.AirButton, HTMLStencilElement {
    }
    var HTMLAirButtonElement: {
        prototype: HTMLAirButtonElement;
        new (): HTMLAirButtonElement;
    };
    interface HTMLAirCardElement extends Components.AirCard, HTMLStencilElement {
    }
    var HTMLAirCardElement: {
        prototype: HTMLAirCardElement;
        new (): HTMLAirCardElement;
    };
    interface HTMLAirFootNavElement extends Components.AirFootNav, HTMLStencilElement {
    }
    var HTMLAirFootNavElement: {
        prototype: HTMLAirFootNavElement;
        new (): HTMLAirFootNavElement;
    };
    interface HTMLAirLinkButtonElement extends Components.AirLinkButton, HTMLStencilElement {
    }
    var HTMLAirLinkButtonElement: {
        prototype: HTMLAirLinkButtonElement;
        new (): HTMLAirLinkButtonElement;
    };
    interface HTMLAirRowElement extends Components.AirRow, HTMLStencilElement {
    }
    var HTMLAirRowElement: {
        prototype: HTMLAirRowElement;
        new (): HTMLAirRowElement;
    };
    interface HTMLAirTopbarElement extends Components.AirTopbar, HTMLStencilElement {
    }
    var HTMLAirTopbarElement: {
        prototype: HTMLAirTopbarElement;
        new (): HTMLAirTopbarElement;
    };
    interface HTMLHeroSectionElement extends Components.HeroSection, HTMLStencilElement {
    }
    var HTMLHeroSectionElement: {
        prototype: HTMLHeroSectionElement;
        new (): HTMLHeroSectionElement;
    };
    interface HTMLElementTagNameMap {
        "air-avatar": HTMLAirAvatarElement;
        "air-button": HTMLAirButtonElement;
        "air-card": HTMLAirCardElement;
        "air-foot-nav": HTMLAirFootNavElement;
        "air-link-button": HTMLAirLinkButtonElement;
        "air-row": HTMLAirRowElement;
        "air-topbar": HTMLAirTopbarElement;
        "hero-section": HTMLHeroSectionElement;
    }
}
declare namespace LocalJSX {
    interface AirAvatar {
        "bgColor"?: string;
        "name"?: string;
        "rounded"?: boolean;
        "size"?: string;
    }
    interface AirButton {
        "autoWidth"?: boolean;
        "circle"?: boolean;
        "content"?: string;
        "disabled"?: boolean;
        "ghost"?: boolean;
        "icon"?: string;
        "loading"?: boolean;
        "plain"?: boolean;
        "round"?: boolean;
        "size"?: 'big' | 'small' | 'medium';
        "suffixIcon"?: string;
        "type"?: 'primary' | 'success' | 'info' | 'warning' | 'danger' | '';
    }
    interface AirCard {
        "description"?: string;
        "imageUrl"?: string;
        "showButton"?: boolean;
        "tags"?: string[];
        "title"?: string;
    }
    interface AirFootNav {
    }
    interface AirLinkButton {
        "href"?: string;
        "icon"?: string;
        "label"?: string;
        "textColor"?: string;
    }
    interface AirRow {
    }
    interface AirTopbar {
        "defaultBgColor"?: string;
        "gradientBgColor"?: string;
        "scrollBgColor"?: string;
        "scrolledTextColor"?: string;
        "shadowEffect"?: boolean;
        "textColor"?: string;
        "titleText"?: string;
        "titleTextColor"?: string;
    }
    interface HeroSection {
    }
    interface IntrinsicElements {
        "air-avatar": AirAvatar;
        "air-button": AirButton;
        "air-card": AirCard;
        "air-foot-nav": AirFootNav;
        "air-link-button": AirLinkButton;
        "air-row": AirRow;
        "air-topbar": AirTopbar;
        "hero-section": HeroSection;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "air-avatar": LocalJSX.AirAvatar & JSXBase.HTMLAttributes<HTMLAirAvatarElement>;
            "air-button": LocalJSX.AirButton & JSXBase.HTMLAttributes<HTMLAirButtonElement>;
            "air-card": LocalJSX.AirCard & JSXBase.HTMLAttributes<HTMLAirCardElement>;
            "air-foot-nav": LocalJSX.AirFootNav & JSXBase.HTMLAttributes<HTMLAirFootNavElement>;
            "air-link-button": LocalJSX.AirLinkButton & JSXBase.HTMLAttributes<HTMLAirLinkButtonElement>;
            "air-row": LocalJSX.AirRow & JSXBase.HTMLAttributes<HTMLAirRowElement>;
            "air-topbar": LocalJSX.AirTopbar & JSXBase.HTMLAttributes<HTMLAirTopbarElement>;
            "hero-section": LocalJSX.HeroSection & JSXBase.HTMLAttributes<HTMLHeroSectionElement>;
        }
    }
}
